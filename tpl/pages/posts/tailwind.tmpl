{{ define "metadescription" }}Discover the Active Record Pattern, a design pattern for mapping database tables to classes. Learn about its benefits, downsides, and alternatives for effective database interaction.{{ end }}

{{ define "intro_text" }}
    Tailwind CSS is a utility-first CSS framework that provides a comprehensive set of pre-defined classes, enabling developers to quickly build modern and responsive user interfaces.<br />
    It focuses on simplicity and customization by offering a low-level approach to styling components.<br />
    This blog post will explain Tailwind's approach in a way I wished it was explained to me.
{{ end }}

{{ define "content" }}

{{template "h2" dict "Text" "Once upon a time there was no CSS"}}

<p>
    When I started with web development in my early teenage years, CSS wasn't a big deal. While it was released in 1996
    already it took a while to get widely adapted.<br />
    Website layouts were basically built with <i>{{"<table>"}}</i> tags and HTML attributes like
    <i>color</i>, <i>bgcolor</i>, <i>cellpadding</i> and so on.<br />
    Back then HTML source code looked similar to this:
</p>

<pre><code class="language-html">{{ `<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<body>
    <table>
        <tr>
            <td align="center" colspan="2">
                <a href="/"><font color="red" face="Verdana">My website</font></a>
            </td>
        </tr>
        <tr>
            <td>
                <u>SIDEBAR</u><br /><br />
                <a href="/foo">Foo</a><br />
                <a href="/bar">Bar</a>
            </td>
            <td>
                <h1>Foo</h1><br /><br />
                <font color="#00008b">Lorem ipsum</font>
            </td>
        </tr>
    </table>
</body>
</html>` }}</code></pre>

<p>
    JavaScript was mostly used to add some <i>questionable</i> effects to the mouse cursor - and to annoy people with popups and alert preventing you from leaving the website.<br />
</p>
<p>
    Popular software to write HTML code was <i>Macromedia Dreamweaver</i> and... my personal favorite...
    <a href="https://de.wikipedia.org/wiki/Microsoft_FrontPage" target="_blank"><i>Frontpage Express</i></a>.
</p>
<p>
    Actually, things were so simple back then...
</p>
<p>
    If you are old enough to remember these times, let us take a brief moment of introspection, shall we?
</p>
<p>
    No SPA frameworks, preprocessors, package managers, dependency hells, bloated web browsers...
</p>
<p>
    ...
</p>
<p>
    OK, that's enough.
</p>
<p>
    We would not be where we are today if the WWW and it's technologies haven't evolved.<br />
    Nowadays there are fancy E-commerce platforms, great games and billion-dollar enterprise applications running
    in a browser - no matter what operation system you use. That's actually a great thing and would not have been possible
    with the tools we have right now.
</p>

{{template "h2" dict "Text" "Then there came CSS... and inline styles"}}
<p>
    During the years the functionality of CSS increased, web browser got better in supporting it and therefore
    it got increasingly widespread.
</p>
<p>
    While it was already possible to put your CSS stylesheets in a separate file or <i>{{"<style>"}}</i> block it
    wasn't too uncommon to simply use inline styles.
</p>
<p>
    So this...
</p>

<pre><code>{{ `<font color="red">my text</font>`}}</code></pre>

<p>
    simply became this:
</p>

<pre><code>{{ `<span style="color: red;">my text</font>`}}</code></pre>

<p>
    The implementation of a linked navigation may have looked like this:
</p>

<pre><code>{{ `<nav>
    <ul style="list-style-type: none;">
        <li style="padding: 5px; ...">
            <a style="text-decoration: none; color: darkblue; ..." href="...">Foo</a>
        </li>
        <li style="padding: 5px; ...">
            <a style="text-decoration: none; color: darkblue; ..." href="...">Bar</a>
        </li>
        <li style="padding: 5px; ...">
            <a style="text-decoration: none; color: darkblue; ..." href="...">Hello</a>
        </li>
        <li style="padding: 5px; ...">
            <a style="text-decoration: none; color: darkblue; ..." href="...">World</a>
        </li>
    </ul>
</nav>`}}</code></pre>

<p>
    You can see, we have a lot of duplicate style information here. This basically had two downsides:<br />

    - Your HTML code got bigger, so it may be slower to load (<i>We come to tha point later again)</i><br />
    - If you want to change the style for multiple elements of the same type you had to touch all the places.
</p>

<p>
    So, many developers quickly agreed to use CSS classes instead...
</p>

{{template "h2" dict "Text" "Semantic HTML & CSS"}}


<p>
    When you decide to use CSS classes instead of inline styles you have to think about <i>names</i> for them.<br />
    There is the common approach to have your HTML structure as semantic as possible. That's good for crawlers
    - because for machines structured, semantic HTML code is better to understand - and has evidential a good
    effect to search engine rankings of the website.
</p>
<p>
    To have good <i>CSS class names</i> & keep your HTML code semantic, the idea came up to give your CSS classes
    a semantic name, too. So, the describe classes should not describe the styles itself (like "text-red") but
    the element the classes are assigned to (like "sidebar"). CSS classes should only be used, when necessary, to not clutter
    the code:
</p>
<pre><code>{{ `<nav>
    <ul class="sidebar">
        <li>
            <a href="...">Foo</a>
        </li>
        <li>
            <a href="...">Bar</a>
        </li>
        <li>
            <a href="...">Hello</a>
        </li>
        <li>
            <a href="...">World</a>
        </li>
    </ul>
</nav>`}}</code></pre>

<pre><code>{{ `<style type="text/css">
    ul.sidebar {
        list-style-type: none;
    }

    ul.sidebar > li {
        padding: 5px;
    }

    ul.sidebar > li > a {
        text-decoration: none;
        color: darkblue;
    }

</style>`}}</code></pre>

<p>
    This was considered a clean way to structure your HTML and implement your CSS classes.<br />
    It had a big downside though:<br />
    In bigger projects, the nesting level of CSS classes got quite high.<br />
    Superset languages on top of CSS - like <a href="https://sass-lang.com/" target="_blank">SCSS</a> - made
    handling this a bit easier - but didn't fix the problem.
</p>

<p>
    I worked on several dozen website projects that time.<br />
    How many projects do you think were strictly implementing semantic HTML and CSS?
</p>

<p>
    ?
</p>

<p>
    Right.<br />
    <strong>Zero.</strong>
</p>


<p>
    There are other approaches to have a clean CSS structure. Like <a href="https://getbem.com/introduction/">BEM</a>,
    wherein you don't try to keep the number of CSS classes as low as possible but instead classify every element you want
    to have a style into <i>blocks</i>, <i>elements</i> and <i>modifiers</i>.
</p>

<pre><code>{{ `<nav class="sidebar">
    <ul class="sidebar__list">
        <li class="sidebar__list-item">
            <a href="...">Foo</a>
        </li>
        <li class="sidebar__list-item">
            <a class="sidebar__list-item-link href="...">Bar</a>
        </li>
        <li class="sidebar__list-item">
            <a class="sidebar__list-item-link href="...">Hello</a>
        </li>
        <li class="sidebar__list-item">
            <a class="sidebar__list-item-link href="...">World</a>
        </li>
    </ul>
</nav>`}}</code></pre>

<p>
    BEM makes sure that the nesting level doesn't get too deep. Every <i>element</i> is inside a <i>block</i> and
    can have multiple <i>modifiers</i>. That's it.
</p>
<p>
    Still, there are some downsides.<br />
    First of all it's not always clear what should be considered a <i>block</i> or <i>element</i>.<br />
    Secondly - as you can see in the example above - we again have a lot of code duplication again. Instead of <i>style</i>
    attributes we now repeat <i>CSS class names</i> instead.
</p>
<p>
    For sure <i>BEM</i> is a nice approach and for many cases superior than inline styles.<br />
    But isn't it a bit frustrating to have to decide between code duplication and crazy nesting levels?
</p>
<p>
    Well, there's an alternative approach. And it's actually so obvious that I wonder why no one really came up with it before.<br />
    Tailwind CSS is implementing this new appraoch, even though - in the past - the <a href="https://adamwathan.me/css-utility-classes-and-separation-of-concerns/" target="_blank">author of Tailwind himself initially did praise semantic CSS</a>.
</p>

{{template "h2" dict "Text" "The Tailwind approach"}}

<p>
    The idea behind Tailwind is to <i>not</i> reuse <i>CSS class names</i> (even though it's possible), but to
    reuse your <i>HTML</i> code.
</p>

<p>
    Let's forget about CSS classes again and have another look at our navigation with inline styles:
</p>

<pre><code>{{ `<nav>
    <ul style="list style">
        <li style="the same item style">
            <a style="the same link style" href="...">Foo</a>
        </li>
        <li style="the same item style">
            <a style="the same link style" href="...">Bar</a>
        </li>
        <li style="the same item style">
            <a style="the same link style" href="...">Hello</a>
        </li>
        <li style="the same item style">
            <a style="the same link style" href="...">World</a>
        </li>
    </ul>
</nav>`}}</code></pre>

<p>
    The issue here is not only the duplication of the <i>style attributes</i> but the duplication of the very same
    HTML tags again and again.<br />
    Even if you use CSS classes for every element you may need to touch every single element later again if the changes
    you want to make have to be done in the HTML.
</p>

<p>
    So what we could do instead is to create several template files
</p>

<p>
    <i>navigation.html</i>
</p>

<pre><code class="language-html">{{ `<nav>
    <ul style="list style">
        {% include 'navitem.html' with {'href': '...', 'text': 'Foo'} %}
        {% include 'navitem.html' with {'href': '...', 'text': 'Bar'} %}
        {% include 'navitem.html' with {'href': '...', 'text': 'Hello'} %}
        {% include 'navitem.html' with {'href': '...', 'text': 'World'} %}
    </ul>
</nav>`}}</code></pre>

<p>
    <i>navitem.html</i>
</p>
<pre><code class="language-html">{{ `<li style="item style">
    {% include 'link.html' with {'href': href, 'text': text} %}
</li>`}}</code></pre>

<p>
    <i>link.html</i>
</p>
<pre><code>{{ `<a style="link style" href="{{ href }}">{{ text }}</a>`}}</code></pre>


<p>
    Now, your CSS styles actually are reusable - but instead of <i>CSS class names</i> you reuse <i>atomic HTML templates</i>.
</p>

<p>
    If you are using popular <i>Single Page Application Frameworks</i> like Vue.JS, React or Svelte, it is already quite common
    to split your HTML (and it's corresponding JavaScript) into several components. And it's a good approach to do that
    very granular.<br />
    But also for classic template engines like Twig it's perfectly doable to split your HTML code into several small components.<br />
    Actually the examples I just showed you were implemented in Twig.
</p>

<p>
    So why not use just inline styles but a framework like Tailwind CSS instead?
</p>

<p>
    Inline styles have a few downsides:
</p>

{{template "list" dict "Items" (slice
    "they are very verbose and end up in very long <i>style</i> attribute values"
    "media queries are not possible, so you can't implement responsive web designs that look differently depending on the screen size"
    "there's no consistency regarding colors, margins, font sizes and so on"
)}}

<p>
    Tailwind provides you a huge number of CSS classes that work similar to inline styles but eliminate the downsides
    just mentioned.
</p>

<h3>Tailwind Example</h3>
<p>
    While Tailwind class names are most likely still more verbose than those of other languages, it's much less
    verbose than inline styles.<br />
</p>

<p>Instead of...</p>
<pre><code>{{ `<a style="display:inline-block; color: red; font-weight: bold; padding: 4px;" href="{{ href }}">{{ text }}</a>`}}</code></pre>
<p>... it will look like this with Tailwind:</p>
<pre><code>{{ `<a class="inline-block text-red font-bold p-1" href="{{ href }}">{{ text }}</a>`}}</code></pre>


<h3>Tailwind Media Queries Example</h3>
<p>
    Also, Tailwind allows you to use media queries.<br />
    If you want to implement a grid with shows 1 column per row on mobile, 2 columns per row on tables and 3 columns per row on bigger screens you can do like this:
</p>

<p>
    <i>grid.html</i>
</p>
<pre><code class="language-html">{{ `<div class="grid grid-cols-12 gap-2" >
    {% include 'griditem.html' with {'content': 'foo '}%}
    {% include 'griditem.html' with {'content': 'bar '}%}
    {% include 'griditem.html' with {'content': 'baz '}%}
    ...
</div>`}}</code></pre>

<p>
    <i>griditem.html</i>
</p>
<pre><code>{{ `<div class="col-span-12 md:col-span-6 lg:-col-span-4">{{ content }}</div>`}}</code></pre>


<h3>CSS class configuration</h3>

<p>
    Tailwind enables developers to follow a consistent style guide.<br />
    For example, if you Styleguide has a fixed list of colors that can or should be used in your design, you can adjust
    your <a href="https://tailwindcss.com/docs/customizing-colors" target="_blank">Tailwind configuration file</a> so
    Tailwind will automatically provide <i>CSS classes</i> for these colors. By default, Tailwind provides already
    a hugh list of predefined colors - but if you like you extend or replace them.<br />
    This does not only work for colors but nearly every CSS attributes you can imagine.
</p>

<h4>Performance</h4>

<p>
    In early times it was considered good programming style to have your HTML code as small as possible.<br />
    Compared to semantic CSS the Tailwind approach definitely bloats up your HTML a bit.
</p>
<p>
    A small HTML file size is not important anymore though because of several reasons:
</p>
{{template "list" dict "Items" (slice
"internet connections got faster - and a few more text characters won't make a difference"
"compared to media files like images and videos, HTML document sizes are so small that they are most often negligible"
"most web servers and browsers support GZIP or other compressions like Brotli. So HTML will be transfered compressed anyway."
)}}

{{end}}
