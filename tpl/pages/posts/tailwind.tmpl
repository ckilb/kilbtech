{{ define "metadescription" }}Discover the Active Record Pattern, a design pattern for mapping database tables to classes. Learn about its benefits, downsides, and alternatives for effective database interaction.{{ end }}

{{ define "intro_text" }}
    Tailwind CSS is a utility-first CSS framework that provides a comprehensive set of pre-defined classes, enabling developers to quickly build modern and responsive user interfaces.<br />
    It focuses on simplicity and customization by offering a low-level approach to styling components.<br />
    This blog post will explain Tailwind's approach in a way I wished it was explained to me.
{{ end }}

{{ define "content" }}

{{template "h2" dict "Text" "Once upon a time there was no CSS"}}

<p>
    When I started with web development in my early teenage years, CSS wasn't a big deal. While it was released in 1996
    already it took a while to get widely adapted.<br />
    Website layouts were basically built with <i>{{"<table>"}}</i> tags and HTML attributes like
    <i>color</i>, <i>bgcolor</i>, <i>cellpadding</i> and so on.<br />
    Back then the source code looked similar to this:
</p>

<pre><code class="language-html">{{ `<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<body>
    <table>
        <tr>
            <td align="center" colspan="2">
                <a href="/"><font color="red" face="Verdana">My website</font></a>
            </td>
        </tr>
        <tr>
            <td>
                <u>SIDEBAR</u><br /><br />
                <a href="/foo">Foo</a><br />
                <a href="/bar">Bar</a>
            </td>
            <td>
                <h1>Foo</h1><br /><br />
                <font color="#00008b">Lorem ipsum</font>
            </td>
        </tr>
    </table>
</body>
</html>` }}</code></pre>

<p>
    JavaScript was mostly used to add some <i>questionable</i> effects to the mouse cursor - and to annoy people with popups and alert preventing you from leaving the website.<br />
</p>
<p>
    Popular software to write HTML code was <i>Macromedia Dreamweaver</i> and... my personal favorite...
    <a href="https://de.wikipedia.org/wiki/Microsoft_FrontPage" target="_blank"><i>Frontpage Express</i></a>.
</p>
<p>
    But... things were so simple back then.
</p>
<p>
    If you are old enough to remember these times, let us take a brief moment of introspection, shall we?
</p>
<p>
    No SPA frameworks, preprocessors, package managers, dependency hells, bloated web browsers...
</p>
<p>
    ...
</p>
<p>
    OK, that's enough.
</p>
<p>
    We would not be where we are today if the WWW and it's technologies haven't evolved.<br />
    Nowadays there are fancy E-commerce platforms, great games and billion-dollar enterprise applications running
    in a browser - no matter what operation system you use. That's actually great thing and would not have been possible
    with the tools we have right now.
</p>

{{template "h2" dict "Text" "Then there came CSS... and inline styles"}}
<p>
    During the years the functionality of CSS increased, web browser got better in supporting it and therefore
    it got increasingly widespread.
</p>
<p>
    While it was already possible to put your CSS stylesheets in a separate file or <i>{{"<style>"}}</i> block it
    wasn't too uncommon to simply use inline styles.<br />
    So this...
</p>

<pre><code>{{ `<font color="red">my text</font>`}}</code></pre>

<p>
    simply got changed to this:
</p>

<pre><code>{{ `<span style="color: red;">my text</font>`}}</code></pre>

    TODO HERE
<p>
    For many <a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller" target="_blank">MVC</a> frameworks the M (Model) part is basically an Active Record implementation, like
    <a href="https://laravel.com/docs/10.x/eloquent" target="_blank">Eloquent</a> in Laravel.

</p>

{{template "h2" dict "Text" "Downsides"}}

<p>
    From my perspective, it totally makes sense to use ORMs for medium- to bigger-sized projects.<br />
    Often I'll try to avoid the Active Record pattern though because it basically violates two important principles:
</p>

{{template "h3" dict "Text" "Single responsibility principle"}}

{{template "quote" dict "Text" "A class should have only one reason to change."}}
<p>
    While it's often arguable what exactly should be considered a single reason or responsibility in software development,
    the active record pattern has without any doubt several responsibilities:
</p>

{{template "list" dict "Items" (slice
    "reading data (usually there's a <i>find()</i> method)"
    "persisting data (usually there's a <i>save()</i> or <i>update()</i> method)"
    "representing a single data row (usually there are public properties or getters to access the values of each column)"
)}}

{{template "h3" dict "Text" "Separation of concerns principle"}}

{{template "quote" dict "Text" "A system should be divided into separate modules, each focusing on a specific aspect of functionality, to improve maintainability and modularity."}}
<p>
    Every place in your code you pass the active record object to will have the ability to read and modify user rows in your database.
    In many cases, you probably only pass the object to different places because you need to work with the data values (such as the username, registration data, and so on, for a <i>User</i> object=.
</p>

<p>
    <strong>Is it a bad thing?</strong><br />
    Not necessarily. For smaller projects, it's a great way to achieve quick results. The pattern provides a clear and convenient way to work with your database.<br />
    And even for bigger projects, when used with care, the pattern can be quite pleasant to work with.
</p>
<p>
    But there is a risk you should be aware of:<br />
    Usually, after you read out data from the database, you will pass these data to a lot of places in your code.
    Like, if you read out a User from the database, you might pass it to some business class (like a <i>NotificationSender</i> or <i>MailSender</i> to send out notifications for that user) or to some template engine to display the user's data.
</p>
<p>
    <strong>Now ask yourself the question:</strong> Should these places be able to modify the user row in your database?
    While you might argue that a <i>NotificationSender</i> might still be able to modify the user row (for example, to update the <i>lastNotificationSent</i> date), this doesn't necessarily be true for every business class.<br />
    Most likely, you definitely don't want your template engine to be able to update the user row.<br />
    You could now argue that you can take the risk - but can you still take, if you work together with many other developers in the same team. Will everyone in your team know and follow the rules?
</p>
<p>
    Another downside of the pattern is that <i>testing</i> could be much harder.<br />
    Let's assume you want to unit-test a business class that retrieves an Active Record Object:
</p>
<pre><code><?php
class Sender
{
    public function send(User $user): void
    {
        ...
        $user->sentAt = date('Y-m-d H:i:s');
        $user->save();
    }
}

...

$sender = new Sender();
$sender->send($user);
</code></pre>

<p>
    How would a unit test for <i>Sender</i> look like? Probably similar to this:
</p>

<pre><code><?php
class SenderTest extends Test
{
    private Sender $sender;

    public function setUp(): void
    {
        parent::setUp();

        $this->sender = new Sender();
    }

    public function testSend(): void
    {
        ...
    }
}
</code></pre>

<p>
    The problem here is, that - without any further ado - the test now saves the passed user in the real database.
    You are not easily able to <i>mock</i> the logic that does the actual persisting to the database.
    But - especially for a unit test - you <i>should</i> mock it. Because the unit to test here i the <i>Sender</i> class.
    Persisting user data is not the responsibility of the <i>Sender</i> itself.
</p>
<p>
    <strong>Please mind</strong>: I don't say here that it's <i>impossible</i> to mock such logic. If you really want, I'm sure you'd find a way.
    But the question is how complex it will be and if it's actually worth it.
</p>

{{template "h2" dict "Text" "Alternatives"}}

<p>
    One alternative is to not use ORM at all and instead use <strong>plain SQL queries</strong>.
    For sure there are many developers out there who think that the benefits of an ORM doesn't compensate for the additional complexity and abstractness.<br />
    For small projects like microservices that might be true and it's worth to consider this approach.
</p>
<p>
    I've worked on many projects in larger teams where it made complete sense to have an ORM in place.<br />
    In these cases, I chose an ORM that has a more precise separation of responsibilities, which typically looks like this:
</p>

{{template "list" dict "Items" (slice
    "a class to <i>read out</i> data from the database. i.e. a <i>UserRepository</i> which contains <i>find*()</i> methods."
    "a class to <i>insert and modify</i> data in the database, i.e. a <i>UserEntityManager</i> which contains <i>save()</i> and <i>update()</i> methods."
    "a class representing a data row, i.e. a <i>UserDto</i> class which has setters and getters for every value, but no business logic"
)}}

<p>
    With this approach, I can safely pass the
    <a href="https://en.wikipedia.org/wiki/Data_transfer_object"
       target="_blank">DTO class</a>
    to other places in my code and be sure that these
    places won't be able to read out more data from the database or modify its data.
</p>

<p>
    Let's see how a <i>Sender</i> class could look like if we have an entity manager:
</p>

<pre><code><?php
class Sender
{
    public function __construct(
        private readonly UserRepositoryInterface $userRepository
    ) {}

    public function send(UserDto $user): void
    {
        ...

        $user->setSentAt(date('Y-m-d H:i:s'));
        $this->userRepository->save($user);
    }
}

...

$entityManager = new UserEntityManager();
$sender = new Sender($entityManager);
$sender->send($user);
</code></pre>

<p>
    <strong>Nice side effect:</strong> By passing the Entity Manager to the constructor it's quite clear that the <i>Sender</i> class will perform database
    modifications for users. You'll know that even without looking into each method and each method's implementation of the class.
</p>

{{template "list" dict "Items" (slice
    "every class that has the <i>UserEntityManager</i> injected, is able to modify user data."
    "any class without the <i>UserEntityManager</i> injected, won't be able to modify user data."
    "every class that has the <i>UserRepository</i> injected, is able to read user data."
    "any class without the <i>UserRepository</i> injected, won't be able to read user data."
)}}

<p>
A test case could look like this:
</p>
<pre><code><?php
class SenderTest extends Test
{
    private Sender $sender;

    /**
     * @var UserEntityManagerInterface&MockObject
     */
    private UserEntityManagerInterface $entityManager;

    public function setUp(): void
    {
        parent::setUp();

        $entityManager = $this->createMock(UserEntityManagerInterface::class);

        $this->sender = new Sender($entityManager);
    }

    public function testSend(): void
    {
        ...
    }
}
</code></pre>
<p>
    You see: mocking the functionality to save a user is now quite straight-forward: No magic involved and easy to grasp.
    <br />
    Creating <i>entity managers</i>, <i>repositories</i> and <i>DTOs</i> for every entity  might be a bit time-consuming and "boilerplatey"
    in the beginning but there's a good chance it will pay off later on.
</p>
{{end}}
