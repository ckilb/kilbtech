{{ define "metadescription" }}Discover the Active Record Pattern, a design pattern for mapping database tables to classes. Learn about its benefits, downsides, and alternatives for effective database interaction.{{ end }}

{{ define "intro_text" }}
    Tailwind CSS is a utility-first CSS framework that provides a comprehensive set of pre-defined classes, enabling developers to quickly build modern and responsive user interfaces.<br />
    It focuses on simplicity and customization by offering a low-level approach to styling components.<br />
    This blog post will explain Tailwind's approach in a way I wished it was explained to me.
{{ end }}

{{ define "content" }}

{{template "h2" dict "Text" "Once upon a time there was no CSS"}}

<p>
    When I started with web development in my early teenage years, CSS wasn't a big deal. While it was released in 1996
    already it took a while to get widely adapted.<br />
    Website layouts were basically built with <i>{{"<table>"}}</i> tags and HTML attributes like
    <i>color</i>, <i>bgcolor</i>, <i>cellpadding</i> and so on.<br />
    Back then the source code looked similar to this:
</p>

<pre><code class="language-html">{{ `<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<body>
    <table>
        <tr>
            <td align="center" colspan="2">
                <a href="/"><font color="red" face="Verdana">My website</font></a>
            </td>
        </tr>
        <tr>
            <td>
                <u>SIDEBAR</u><br /><br />
                <a href="/foo">Foo</a><br />
                <a href="/bar">Bar</a>
            </td>
            <td>
                <h1>Foo</h1><br /><br />
                <font color="#00008b">Lorem ipsum</font>
            </td>
        </tr>
    </table>
</body>
</html>` }}</code></pre>

<p>
    JavaScript was mostly used to add some <i>questionable</i> effects to the mouse cursor - and to annoy people with popups and alert preventing you from leaving the website.<br />
</p>
<p>
    Popular software to write HTML code was <i>Macromedia Dreamweaver</i> and... my personal favorite...
    <a href="https://de.wikipedia.org/wiki/Microsoft_FrontPage" target="_blank"><i>Frontpage Express</i></a>.
</p>
<p>
    But... things were so simple back then.
</p>
<p>
    If you are old enough to remember these times, let us take a brief moment of introspection, shall we?
</p>
<p>
    No SPA frameworks, preprocessors, package managers, dependency hells, bloated web browsers...
</p>
<p>
    ...
</p>
<p>
    OK, that's enough.
</p>
<p>
    We would not be where we are today if the WWW and it's technologies haven't evolved.<br />
    Nowadays there are fancy E-commerce platforms, great games and billion-dollar enterprise applications running
    in a browser - no matter what operation system you use. That's actually great thing and would not have been possible
    with the tools we have right now.
</p>

{{template "h2" dict "Text" "Then there came CSS... and inline styles"}}
<p>
    During the years the functionality of CSS increased, web browser got better in supporting it and therefore
    it got increasingly widespread.
</p>
<p>
    While it was already possible to put your CSS stylesheets in a separate file or <i>{{"<style>"}}</i> block it
    wasn't too uncommon to simply use inline styles.<br />
    So this...
</p>

<pre><code>{{ `<font color="red">my text</font>`}}</code></pre>

<p>
    simply became this:
</p>

<pre><code>{{ `<span style="color: red;">my text</font>`}}</code></pre>

<p>
    So, the implementation of a linked navigation list would look like this:
</p>

<pre><code>{{ `<nav>
    <ul style="list-style-type: none;">
        <li style="padding: 5px; ...">
            <a style="text-decoration: none; color: darkblue; ..." href="...">Foo</a>
        </li>
        <li style="padding: 5px; ...">
            <a style="text-decoration: none; color: darkblue; ..." href="...">Bar</a>
        </li>
        <li style="padding: 5px; ...">
            <a style="text-decoration: none; color: darkblue; ..." href="...">Hello</a>
        </li>
        <li style="padding: 5px; ...">
            <a style="text-decoration: none; color: darkblue; ..." href="...">World</a>
        </li>
    </ul>
</nav>`}}</code></pre>

<p>
    You can see, we have a lot of duplicate style information here. This basically had two downsides:<br />

    - Your HTML code got bigger, so it may be slower to load (<i>We come to tha point later again)</i><br />
    - If you want to change the style for multiple elements of the same type you had to touch all the places.
</p>

<p>
    So, many developers quickly agreed to use CSS classes instead...
</p>

{{template "h2" dict "Text" "Semantic HTML & CSS"}}


<p>
    When you decide to use CSS classes instead of inline styles you have to think about <i>names</i> for them.<br />
    There is the common approach to have your HTML structure as semantic as possible. That's good for crawlers
    - because for machines structured, semantic HTML code is better to understand - and has evidential a good
    effect to search engine rankings of the website.
</p>
<p>
    To have good <i>CSS class names</i> & keep your HTML code semantic, the idea came up to give your CSS classes
    a semantic name, too. So, the describe classes should not describe the styles itself (like "text-red") but
    the element the classes are assigned to (like "sidebar"). CSS classes should only be used, when necessary, to not clutter
    the code:
</p>
<pre><code>{{ `<nav>
    <ul class="sidebar">
        <li>
            <a href="...">Foo</a>
        </li>
        <li>
            <a href="...">Bar</a>
        </li>
        <li>
            <a href="...">Hello</a>
        </li>
        <li>
            <a href="...">World</a>
        </li>
    </ul>
</nav>`}}</code></pre>

<pre><code>{{ `<style type="text/css">
    ul.sidebar {
        list-style-type: none;
    }

    ul.sidebar > li {
        padding: 5px;
    }

    ul.sidebar > li > a {
        text-decoration: none;
        color: darkblue;
    }

</style>`}}</code></pre>

<p>
    This was considered a clean way to structure your HTML and implement your CSS classes.<br />
    It had a big downside though:<br />
    In bigger projects, the nesting level of CSS classes got quite high.<br />
    Superset languages on top of CSS - like <a href="https://sass-lang.com/" target="_blank">SCSS</a> - made
    handling this a bit easier - but didn't fix the problem.
</p>

<p>
    I worked on several dozen website projects that time.<br />
    How many projects do you think were strictly implementing semantic HTML and CSS?
</p>

<p>
    ?
</p>

<p>
    Right.<br />
    <strong>Zero.</strong>
</p>


<p>
    There are other approaches to have a clean CSS structure. Like <a href="https://getbem.com/introduction/">BEM</a>,
    wherein you don't try to keep the number of CSS classes as low as possible but instead classify every element you want
    to have a style into <i>blocks</i>, <i>elements</i> and <i>modifiers</i>.
</p>

<pre><code>{{ `<nav class="sidebar">
    <ul class="sidebar__list">
        <li class="sidebar__list-item">
            <a href="...">Foo</a>
        </li>
        <li class="sidebar__list-item">
            <a class="sidebar__list-item-link href="...">Bar</a>
        </li>
        <li class="sidebar__list-item">
            <a class="sidebar__list-item-link href="...">Hello</a>
        </li>
        <li class="sidebar__list-item">
            <a class="sidebar__list-item-link href="...">World</a>
        </li>
    </ul>
</nav>`}}</code></pre>

<p>
    BEM makes sure that the nesting level doesn't get too deep. Every <i>element</i> is inside a <i>block</i> and
    can have multiple <i>modifiers</i>. That's it.
</p>
<p>
    Still, there are some downsides.<br />
    First of all it's not always clear what should be considered a <i>block</i> or <i>element</i>.<br />
    Secondly - as you can see in the example above - we again have a lot of code duplication again. Instead of <i>style</i>
    attributes we now repeat <i>CSS class names</i> instead.
</p>
<p>
    For sure BEM is a nice approach and for many cases superior than inline styles.<br />
    But isn't it a bit frustrating to have to decide between code duplication and crazy nesting levels?
</p>
<p>
    Well, there's an alternative approach. And it's so easy that I wonder why no one really came up with it before.<br />
    Tailwind CSS is implementing this new appraoch, even though - in the past - the .
</p>
{{end}}
